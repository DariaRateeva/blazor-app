@page "/products"
@rendermode InteractiveWebAssembly
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using BlazorApp.Shared.Dtos

<PageTitle>Products</PageTitle>
<h1>Products</h1>


<p>
    <a class="btn btn-primary" href="/product/edit">Create New Product</a>
</p>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else if (products.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Color</th>
                <th>Model</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Color</td>
                    <td>@product.Model</td>
                    <td>
                        <a class="btn btn-sm btn-outline-primary" href="/product/edit/@product.Id">Edit</a>
                        <button class="btn btn-sm btn-outline-danger ms-2" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p><em>No products found.</em></p>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@code {
    private List<ProductDto>? products;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            products = await Http.GetFromJsonAsync<List<ProductDto>>("api/products");
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading products: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async Task DeleteProduct(int id)
    {
        if (await ConfirmDelete())
        {
            try
            {
                var response = await Http.DeleteAsync($"api/products/{id}");
                
                if (response.IsSuccessStatusCode)
                {
                    await LoadProducts(); // Refresh the list
                    errorMessage = null;
                }
                else
                {
                    errorMessage = $"Error deleting product: {response.ReasonPhrase}";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error deleting product: {ex.Message}";
                Console.WriteLine(errorMessage);
            }
        }
    }

    private async Task<bool> ConfirmDelete()
    {
        return await Task.FromResult(true); 
    }
}
